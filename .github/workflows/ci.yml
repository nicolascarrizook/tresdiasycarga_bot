name: Continuous Integration

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - develop

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy
          
      - name: Run Black
        run: black --check .
        
      - name: Run Ruff
        run: ruff check .
        
      - name: Run MyPy
        run: mypy .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL=redis://localhost:6379
          SECRET_KEY=test-secret-key
          OPENAI_API_KEY=test-api-key
          TELEGRAM_BOT_TOKEN=test-token
          ENV=test
          DEBUG=true
          EOF
          
      - name: Run database migrations
        run: |
          export $(cat .env.test | xargs)
          alembic upgrade head
          
      - name: Run tests
        run: |
          export $(cat .env.test | xargs)
          pytest -v --cov=api --cov=telegram_bot --cov=data_processor --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-py${{ matrix.python-version }}
          
      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v3
        if: matrix.python-version == '3.11'
        with:
          name: coverage-report
          path: htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          
      - name: Run Safety check
        run: |
          pip install -r requirements.txt
          safety check --json
        continue-on-error: true
        
      - name: Run Bandit
        run: bandit -r api/ telegram_bot/ data_processor/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/api/Dockerfile
          push: false
          tags: sistema-mayra-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build Telegram Bot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/telegram_bot/Dockerfile
          push: false
          tags: sistema-mayra-bot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/nginx
          file: ./docker/nginx/Dockerfile
          push: false
          tags: sistema-mayra-nginx:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: sistema-mayra-api:test
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test, docker]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create test environment file
        run: |
          cat > .env << EOF
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL=redis://localhost:6379
          SECRET_KEY=test-secret-key
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY || 'test-api-key' }}
          TELEGRAM_BOT_TOKEN=test-token
          ENV=test
          DEBUG=true
          EOF
          
      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.dev.yml up -d api
          
      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          
      - name: Run integration tests
        run: |
          # Add integration test commands here
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/docs
          
      - name: Show logs on failure
        if: failure()
        run: |
          docker-compose -f docker-compose.dev.yml logs

  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker, integration]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: coverage
          
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage/index.html', 'utf8');
            const coverageMatch = coverage.match(/(\d+)%/);
            const coveragePercent = coverageMatch ? coverageMatch[1] : 'N/A';
            
            const comment = `## =€ CI Results
            
             All checks passed!
            
            ### =Ê Test Coverage: ${coveragePercent}%
            
            | Check | Status |
            |-------|--------|
            | Linting |  Passed |
            | Tests |  Passed |
            | Security |  Passed |
            | Docker Build |  Passed |
            | Integration |  Passed |
            
            View full coverage report in the artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });