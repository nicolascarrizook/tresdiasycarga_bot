name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL=redis://localhost:6379
          SECRET_KEY=test-secret-key
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          TELEGRAM_BOT_TOKEN=test-token
          ENV=test
          DEBUG=true
          EOF
          
      - name: Run database migrations
        run: |
          export $(cat .env.test | xargs)
          alembic upgrade head
          
      - name: Run tests
        run: |
          export $(cat .env.test | xargs)
          pytest -v --cov=api --cov=telegram_bot --cov=data_processor --cov-report=xml
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Run linting
        run: |
          black --check .
          ruff check .
          mypy .

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/sistema-mayra-api:latest
            ${{ secrets.DOCKER_USERNAME }}/sistema-mayra-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Telegram Bot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/telegram_bot/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/sistema-mayra-bot:latest
            ${{ secrets.DOCKER_USERNAME }}/sistema-mayra-bot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/nginx
          file: ./docker/nginx/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/sistema-mayra-nginx:latest
            ${{ secrets.DOCKER_USERNAME }}/sistema-mayra-nginx:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment:
      name: production
      url: https://${{ secrets.PRODUCTION_DOMAIN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.DEPLOY_HOST_KEY }}" >> ~/.ssh/known_hosts
          
      - name: Create production environment file
        run: |
          cat > .env.prod << EOF
          # Deployment
          DEPLOY_HOST=${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER=${{ secrets.DEPLOY_USER }}
          DOMAIN_NAME=${{ secrets.PRODUCTION_DOMAIN }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          
          # Database
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          
          # Redis
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          
          # API
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          
          # OpenAI
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL=gpt-4
          
          # Telegram
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_ADMIN_USER_ID=${{ secrets.TELEGRAM_ADMIN_USER_ID }}
          
          # Docker Registry
          DOCKER_REGISTRY=${{ secrets.DOCKER_USERNAME }}
          
          # Monitoring
          GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          
          # Backup
          BACKUP_S3_BUCKET=${{ secrets.BACKUP_S3_BUCKET }}
          BACKUP_S3_ACCESS_KEY=${{ secrets.BACKUP_S3_ACCESS_KEY }}
          BACKUP_S3_SECRET_KEY=${{ secrets.BACKUP_S3_SECRET_KEY }}
          
          # n8n
          N8N_BASIC_AUTH_PASSWORD=${{ secrets.N8N_BASIC_AUTH_PASSWORD }}
          N8N_JWT_SECRET=${{ secrets.N8N_JWT_SECRET }}
          N8N_ENCRYPTION_KEY=${{ secrets.N8N_ENCRYPTION_KEY }}
          EOF
          
      - name: Deploy to server
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/deploy_key
          
          # Run deployment script
          ./scripts/deployment/deploy.sh
          
      - name: Verify deployment
        run: |
          # Wait for services to start
          sleep 60
          
          # Check API health
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_DOMAIN }}/health)
          if [ $response -eq 200 ]; then
            echo " API is healthy"
          else
            echo "L API health check failed with status: $response"
            exit 1
          fi
          
      - name: Send deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS=" SUCCESS"
            COLOR="good"
          else
            STATUS="L FAILED"
            COLOR="danger"
          fi
          
          # Send Telegram notification
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"${{ secrets.TELEGRAM_ADMIN_USER_ID }}\",
              \"text\": \"=€ *Deployment Status*\n\n$STATUS\n\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nMessage: ${{ github.event.head_commit.message }}\",
              \"parse_mode\": \"Markdown\"
            }"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: version
        run: |
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Increment patch version
          VERSION=$(echo $LATEST_TAG | sed 's/v//')
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" | head -20)
          else
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)")
          fi
          
          # Create changelog
          CHANGELOG="## What's Changed\n\n$COMMITS\n\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...${{ steps.version.outputs.version }}"
          
          # Save to file for release body
          echo -e "$CHANGELOG" > changelog.md
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false