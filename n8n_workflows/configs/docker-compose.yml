version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: sistema-mayra-n8n
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_DB_TYPE=${N8N_DB_TYPE}
      - N8N_DB_POSTGRESDB_HOST=${N8N_DB_POSTGRESDB_HOST}
      - N8N_DB_POSTGRESDB_PORT=${N8N_DB_POSTGRESDB_PORT}
      - N8N_DB_POSTGRESDB_DATABASE=${N8N_DB_POSTGRESDB_DATABASE}
      - N8N_DB_POSTGRESDB_USER=${N8N_DB_POSTGRESDB_USER}
      - N8N_DB_POSTGRESDB_PASSWORD=${N8N_DB_POSTGRESDB_PASSWORD}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_WEBHOOK_TUNNEL_URL=${N8N_WEBHOOK_TUNNEL_URL}
      - N8N_JWT_SECRET=${N8N_JWT_SECRET}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_EXECUTIONS_PROCESS=${N8N_EXECUTIONS_PROCESS}
      - N8N_EXECUTIONS_MODE=${N8N_EXECUTIONS_MODE}
      - N8N_EXECUTIONS_TIMEOUT=${N8N_EXECUTIONS_TIMEOUT}
      - N8N_EXECUTIONS_TIMEOUT_MAX=${N8N_EXECUTIONS_TIMEOUT_MAX}
      - N8N_EXECUTIONS_DATA_SAVE_ON_ERROR=${N8N_EXECUTIONS_DATA_SAVE_ON_ERROR}
      - N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS=${N8N_EXECUTIONS_DATA_SAVE_ON_SUCCESS}
      - N8N_EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=${N8N_EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS}
      - N8N_EXECUTIONS_DATA_PRUNE=${N8N_EXECUTIONS_DATA_PRUNE}
      - N8N_EXECUTIONS_DATA_MAX_AGE=${N8N_EXECUTIONS_DATA_MAX_AGE}
      - N8N_EXECUTIONS_DATA_PRUNE_MAX_COUNT=${N8N_EXECUTIONS_DATA_PRUNE_MAX_COUNT}
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL}
      - N8N_LOG_OUTPUT=${N8N_LOG_OUTPUT}
      - N8N_LOG_FILE_LOCATION=${N8N_LOG_FILE_LOCATION}
      - N8N_METRICS=${N8N_METRICS}
      - N8N_METRICS_PREFIX=${N8N_METRICS_PREFIX}
      - N8N_PERSONALIZATION_ENABLED=${N8N_PERSONALIZATION_ENABLED}
      - N8N_VERSION_NOTIFICATIONS_ENABLED=${N8N_VERSION_NOTIFICATIONS_ENABLED}
      - N8N_TEMPLATES_ENABLED=${N8N_TEMPLATES_ENABLED}
      - N8N_ONBOARDING_FLOW_DISABLED=${N8N_ONBOARDING_FLOW_DISABLED}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_TELEGRAM_ID=${ADMIN_TELEGRAM_ID}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - API_BASE_URL=${API_BASE_URL}
      - TZ=${TZ}
      - NODE_ENV=${NODE_ENV}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows
      - ./configs:/home/node/.n8n/configs
      - ./logs:/var/log/n8n
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - sistema-mayra-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.yourdomain.com`)"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  postgres:
    image: postgres:15-alpine
    container_name: sistema-mayra-n8n-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${N8N_DB_POSTGRESDB_DATABASE}
      - POSTGRES_USER=${N8N_DB_POSTGRESDB_USER}
      - POSTGRES_PASSWORD=${N8N_DB_POSTGRESDB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=es_AR.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sistema-mayra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${N8N_DB_POSTGRESDB_USER} -d ${N8N_DB_POSTGRESDB_DATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: sistema-mayra-n8n-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - sistema-mayra-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nginx:
    image: nginx:alpine
    container_name: sistema-mayra-n8n-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/ssl:/etc/nginx/ssl
      - ./logs:/var/log/nginx
    depends_on:
      - n8n
    networks:
      - sistema-mayra-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`yourdomain.com`)"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"

  prometheus:
    image: prom/prometheus:latest
    container_name: sistema-mayra-n8n-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sistema-mayra-network

  grafana:
    image: grafana/grafana:latest
    container_name: sistema-mayra-n8n-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - sistema-mayra-network

  backup:
    image: postgres:15-alpine
    container_name: sistema-mayra-n8n-backup
    restart: "no"
    environment:
      - POSTGRES_HOST=${N8N_DB_POSTGRESDB_HOST}
      - POSTGRES_DB=${N8N_DB_POSTGRESDB_DATABASE}
      - POSTGRES_USER=${N8N_DB_POSTGRESDB_USER}
      - POSTGRES_PASSWORD=${N8N_DB_POSTGRESDB_PASSWORD}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh
    depends_on:
      - postgres
    networks:
      - sistema-mayra-network
    command: ["/usr/local/bin/backup.sh"]

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sistema-mayra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health check endpoints
# n8n: http://localhost:5678/healthz
# postgres: pg_isready command
# redis: redis-cli ping
# nginx: http://localhost/health

# Monitoring URLs
# n8n: http://localhost:5678
# grafana: http://localhost:3000
# prometheus: http://localhost:9090

# Backup locations
# Database backups: ./backups/postgres/
# n8n workflows: ./backups/n8n/
# Redis data: ./backups/redis/