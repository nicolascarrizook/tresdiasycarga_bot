{
  "name": "Notification Template",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "notification-webhook",
        "options": {
          "responseMode": "responseNode"
        }
      },
      "id": "notification-webhook",
      "name": "Notification Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "assignment-1",
              "name": "notification_type",
              "value": "={{ $json.type || 'info' }}",
              "type": "string"
            },
            {
              "id": "assignment-2",
              "name": "message",
              "value": "={{ $json.message || 'Default notification message' }}",
              "type": "string"
            },
            {
              "id": "assignment-3",
              "name": "recipient",
              "value": "={{ $json.recipient || $env.ADMIN_TELEGRAM_ID }}",
              "type": "string"
            },
            {
              "id": "assignment-4",
              "name": "priority",
              "value": "={{ $json.priority || 'normal' }}",
              "type": "string"
            },
            {
              "id": "assignment-5",
              "name": "timestamp",
              "value": "={{ $now.toISOString() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "process-notification",
      "name": "Process Notification",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.notification_type }}",
              "rightValue": "error",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "check-notification-type",
      "name": "Check Notification Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "assignment-1",
              "name": "formatted_message",
              "value": "=üö® **ERROR** - Sistema Mayra\\n\\n{{ $json.message }}\\n\\nüïê **Timestamp:** {{ $json.timestamp }}\\n\\n‚ö†Ô∏è **Acci√≥n requerida:** Revisar inmediatamente",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-error-message",
      "name": "Format Error Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        900,
        220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.notification_type }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "check-success-type",
      "name": "Check Success Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        900,
        380
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "assignment-1",
              "name": "formatted_message",
              "value": "=‚úÖ **√âXITO** - Sistema Mayra\\n\\n{{ $json.message }}\\n\\nüïê **Timestamp:** {{ $json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-success-message",
      "name": "Format Success Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "assignment-1",
              "name": "formatted_message",
              "value": "=‚ÑπÔ∏è **INFO** - Sistema Mayra\\n\\n{{ $json.message }}\\n\\nüïê **Timestamp:** {{ $json.timestamp }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-info-message",
      "name": "Format Info Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1120,
        460
      ]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": \"{{ $('Process Notification').first().json.recipient }}\",\n  \"text\": \"{{ $json.formatted_message }}\",\n  \"parse_mode\": \"Markdown\"\n}"
      },
      "id": "send-telegram-notification",
      "name": "Send Telegram Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/notifications/log",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"type\": \"{{ $('Process Notification').first().json.notification_type }}\",\n  \"message\": \"{{ $('Process Notification').first().json.message }}\",\n  \"recipient\": \"{{ $('Process Notification').first().json.recipient }}\",\n  \"priority\": \"{{ $('Process Notification').first().json.priority }}\",\n  \"timestamp\": \"{{ $('Process Notification').first().json.timestamp }}\",\n  \"sent_successfully\": {{ $json.ok ? 'true' : 'false' }}\n}"
      },
      "id": "log-notification",
      "name": "Log Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Notification sent successfully\", \"timestamp\": $('Process Notification').first().json.timestamp } }}"
      },
      "id": "notification-response",
      "name": "Notification Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1780,
        300
      ]
    }
  ],
  "connections": {
    "Notification Webhook": {
      "main": [
        [
          {
            "node": "Process Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Notification": {
      "main": [
        [
          {
            "node": "Check Notification Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Notification Type": {
      "main": [
        [
          {
            "node": "Format Error Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Success Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Error Message": {
      "main": [
        [
          {
            "node": "Send Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success Type": {
      "main": [
        [
          {
            "node": "Format Success Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Info Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Message": {
      "main": [
        [
          {
            "node": "Send Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Info Message": {
      "main": [
        [
          {
            "node": "Send Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Telegram Notification": {
      "main": [
        [
          {
            "node": "Log Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Notification": {
      "main": [
        [
          {
            "node": "Notification Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "timezone": "America/Argentina/Buenos_Aires",
    "saveExecutionProgress": true,
    "saveManualExecutions": false,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  },
  "staticData": {},
  "tags": ["template"],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": false
  }
}