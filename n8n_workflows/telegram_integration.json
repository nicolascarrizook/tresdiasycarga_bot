{
  "name": "Telegram Bot Integration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "telegram-webhook",
        "options": {
          "responseMode": "responseNode"
        }
      },
      "id": "telegram-webhook",
      "name": "Telegram Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "assignment-1",
              "name": "message_type",
              "value": "={{ $json.message ? 'message' : ($json.callback_query ? 'callback_query' : 'unknown') }}",
              "type": "string"
            },
            {
              "id": "assignment-2",
              "name": "user_id",
              "value": "={{ $json.message ? $json.message.from.id : ($json.callback_query ? $json.callback_query.from.id : null) }}",
              "type": "string"
            },
            {
              "id": "assignment-3",
              "name": "chat_id",
              "value": "={{ $json.message ? $json.message.chat.id : ($json.callback_query ? $json.callback_query.message.chat.id : null) }}",
              "type": "string"
            },
            {
              "id": "assignment-4",
              "name": "text",
              "value": "={{ $json.message ? $json.message.text : ($json.callback_query ? $json.callback_query.data : null) }}",
              "type": "string"
            },
            {
              "id": "assignment-5",
              "name": "username",
              "value": "={{ $json.message ? $json.message.from.username : ($json.callback_query ? $json.callback_query.from.username : null) }}",
              "type": "string"
            },
            {
              "id": "assignment-6",
              "name": "first_name",
              "value": "={{ $json.message ? $json.message.from.first_name : ($json.callback_query ? $json.callback_query.from.first_name : null) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-message-data",
      "name": "Extract Message Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/telegram/log-interaction",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"message_type\": \"{{ $json.message_type }}\",\n  \"text\": \"{{ $json.text }}\",\n  \"timestamp\": \"{{ $now.toISOString() }}\",\n  \"username\": \"{{ $json.username }}\",\n  \"first_name\": \"{{ $json.first_name }}\"\n}"
      },
      "id": "log-interaction",
      "name": "Log Interaction",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.message_type }}",
              "rightValue": "message",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-message-type",
      "name": "Check Message Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.text }}",
              "rightValue": "/start",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "check-start-command",
      "name": "Check Start Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.text }}",
              "rightValue": "/control",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "check-control-command",
      "name": "Check Control Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.text }}",
              "rightValue": "/reemplazar",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        }
      },
      "id": "check-replace-command",
      "name": "Check Replace Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        380
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/telegram/motor1/start",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"first_name\": \"{{ $json.first_name }}\",\n  \"username\": \"{{ $json.username }}\"\n}"
      },
      "id": "handle-start-command",
      "name": "Handle Start Command",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        140
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/telegram/motor2/start",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\"\n}"
      },
      "id": "handle-control-command",
      "name": "Handle Control Command",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        220
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/telegram/motor3/start",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\"\n}"
      },
      "id": "handle-replace-command",
      "name": "Handle Replace Command",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/telegram/conversation/continue",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"message\": \"{{ $json.text }}\"\n}"
      },
      "id": "handle-conversation",
      "name": "Handle Conversation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        380
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/telegram/callback/handle",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $json.user_id }}\",\n  \"chat_id\": \"{{ $json.chat_id }}\",\n  \"callback_data\": \"{{ $json.text }}\",\n  \"message_id\": \"{{ $('Telegram Webhook').first().json.callback_query.message.message_id }}\"\n}"
      },
      "id": "handle-callback-query",
      "name": "Handle Callback Query",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1120,
        460
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-api-success",
      "name": "Check API Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.response }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-response-exists",
      "name": "Check Response Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1780,
        220
      ]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": \"{{ $('Extract Message Data').first().json.chat_id }}\",\n  \"text\": \"{{ $json.response }}\",\n  \"parse_mode\": \"{{ $json.parse_mode || 'HTML' }}\",\n  \"reply_markup\": {{ $json.reply_markup ? JSON.stringify($json.reply_markup) : 'null' }}\n}"
      },
      "id": "send-telegram-response",
      "name": "Send Telegram Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        140
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.file_path }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-file-exists",
      "name": "Check File Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2000,
        220
      ]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendDocument",
        "options": {
          "bodyContentType": "multipart-form-data",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $('Extract Message Data').first().json.chat_id }}"
            },
            {
              "name": "document",
              "inputDataFieldName": "file_data",
              "type": "n8n-nodes-base.uploadFile"
            },
            {
              "name": "caption",
              "value": "={{ $json.file_caption || 'Tu plan nutricional está listo' }}"
            }
          ]
        }
      },
      "id": "send-telegram-file",
      "name": "Send Telegram File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2220,
        180
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/telegram/log-error",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $('Extract Message Data').first().json.user_id }}\",\n  \"chat_id\": \"{{ $('Extract Message Data').first().json.chat_id }}\",\n  \"error\": \"{{ $json.error || 'API processing failed' }}\",\n  \"timestamp\": \"{{ $now.toISOString() }}\",\n  \"original_message\": \"{{ $('Extract Message Data').first().json.text }}\"\n}"
      },
      "id": "log-api-error",
      "name": "Log API Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        380
      ]
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": \"{{ $('Extract Message Data').first().json.chat_id }}\",\n  \"text\": \"❌ Ha ocurrido un error procesando tu solicitud. Por favor, intenta nuevamente en unos minutos.\\n\\nSi el problema persiste, puedes usar /start para reiniciar la conversación.\",\n  \"parse_mode\": \"HTML\"\n}"
      },
      "id": "send-error-response",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        380
      ]
    },
    {
      "parameters": {
        "url": "http://api:8000/api/telegram/analytics/update",
        "options": {
          "bodyContentType": "json",
          "response": {
            "response": {
              "fullResponse": false,
              "responseFormat": "json"
            }
          }
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"user_id\": \"{{ $('Extract Message Data').first().json.user_id }}\",\n  \"action\": \"{{ $json.ok ? 'message_sent' : 'message_failed' }}\",\n  \"message_type\": \"{{ $('Extract Message Data').first().json.message_type }}\",\n  \"success\": {{ $json.ok ? 'true' : 'false' }},\n  \"timestamp\": \"{{ $now.toISOString() }}\"\n}"
      },
      "id": "update-analytics",
      "name": "Update Analytics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2440,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"ok\": true, \"description\": \"Webhook processed successfully\" } }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2660,
        300
      ]
    }
  ],
  "connections": {
    "Telegram Webhook": {
      "main": [
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message Data": {
      "main": [
        [
          {
            "node": "Log Interaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Interaction": {
      "main": [
        [
          {
            "node": "Check Message Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Message Type": {
      "main": [
        [
          {
            "node": "Check Start Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Control Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Replace Command",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Callback Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Start Command": {
      "main": [
        [
          {
            "node": "Handle Start Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Control Command": {
      "main": [
        [
          {
            "node": "Handle Control Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Replace Command": {
      "main": [
        [
          {
            "node": "Handle Replace Command",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Start Command": {
      "main": [
        [
          {
            "node": "Check API Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Control Command": {
      "main": [
        [
          {
            "node": "Check API Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Replace Command": {
      "main": [
        [
          {
            "node": "Check API Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Conversation": {
      "main": [
        [
          {
            "node": "Check API Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Callback Query": {
      "main": [
        [
          {
            "node": "Check API Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Success": {
      "main": [
        [
          {
            "node": "Check Response Exists",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log API Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Response Exists": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Telegram Response": {
      "main": [
        [
          {
            "node": "Check File Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Exists": {
      "main": [
        [
          {
            "node": "Send Telegram File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Telegram File": {
      "main": [
        [
          {
            "node": "Update Analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log API Error": {
      "main": [
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Error Response": {
      "main": [
        [
          {
            "node": "Update Analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Analytics": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/Argentina/Buenos_Aires",
    "saveExecutionProgress": true,
    "saveManualExecutions": false,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all"
  },
  "staticData": {},
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": false
  }
}